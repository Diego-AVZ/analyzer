[33mcommit 6fc8c46e9e436f87f529dbf37d22c6fb216138a7[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: Diego-AVZ <avzdiego00@gmail.com>
Date:   Tue Oct 21 11:01:12 2025 +0200

    fix: configuraci√≥n Vercel para frontend + fix ESLint warning

[1mdiff --git a/backend-server.js b/backend-server.js[m
[1mindex 30ee4ab..82de157 100644[m
[1m--- a/backend-server.js[m
[1m+++ b/backend-server.js[m
[36m@@ -263,35 +263,21 @@[m [mfunction calculateAPR(metrics) {[m
   const periods = Object.keys(metrics);[m
   if (periods.length === 0) return 0;[m
 [m
[31m-  // Priorizar per√≠odos m√°s largos para APR m√°s realista[m
[31m-  const periodPriority = ['100d', '60d', '30d'];[m
[32m+[m[32m  // Usar el mejor per√≠odo para calcular APR (sin reinversi√≥n)[m
[32m+[m[32m  let bestAPR = 0;[m
   [m
[31m-  for (const period of periodPriority) {[m
[32m+[m[32m  for (const period of periods) {[m
     const metric = metrics[period];[m
     if (metric && metric.validDays >= 30) {[m
       const days = parseInt(period.replace('d', ''));[m
       const totalProfit = metric.totalProfit;[m
[31m-      [m
       // APR simple: ganancia total * (365 d√≠as / d√≠as del per√≠odo)[m
       const apr = (totalProfit * 365) / days;[m
[31m-      [m
[31m-      // Aplicar factor de realismo basado en el per√≠odo[m
[31m-      let realisticAPR = apr;[m
[31m-      [m
[31m-      if (period === '30d') {[m
[31m-        // Reducir APR de 30d para ser m√°s conservador[m
[31m-        realisticAPR = apr * 0.7; // 30% menos realista[m
[31m-      } else if (period === '60d') {[m
[31m-        // Reducir ligeramente APR de 60d[m
[31m-        realisticAPR = apr * 0.85; // 15% menos realista[m
[31m-      }[m
[31m-      // 100d se mantiene sin reducci√≥n[m
[31m-      [m
[31m-      return Math.round(realisticAPR * 10) / 10; // Redondear a 1 decimal[m
[32m+[m[32m      bestAPR = Math.max(bestAPR, apr);[m
     }[m
   }[m
 [m
[31m-  return 0;[m
[32m+[m[32m  return Math.round(bestAPR * 10) / 10; // Redondear a 1 decimal[m
 }[m
 [m
 function generateSimulatedTVL(pair, score) {[m
[1mdiff --git a/vercel.json b/vercel.json[m
[1mindex c7a8d9a..4f95c21 100644[m
[1m--- a/vercel.json[m
[1m+++ b/vercel.json[m
[36m@@ -2,11 +2,16 @@[m
   "$schema": "https://openapi.vercel.sh/vercel.json",[m
   "version": 2,[m
   "buildCommand": "npm run build",[m
[32m+[m[32m  "outputDirectory": "frontend/build",[m
   "regions": ["lhr1"],[m
   "builds": [[m
     {[m
       "src": "backend-server.js",[m
       "use": "@vercel/node"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m      "src": "frontend/build/**",[m
[32m+[m[32m      "use": "@vercel/static"[m
     }[m
   ],[m
   "routes": [[m
[36m@@ -16,7 +21,7 @@[m
     },[m
     {[m
       "src": "/(.*)",[m
[31m-      "dest": "/backend-server.js"[m
[32m+[m[32m      "dest": "/frontend/build/index.html"[m
     }[m
   ][m
 }[m
